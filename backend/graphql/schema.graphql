type Query {
    # Returns the currently authenticated user
    me: User @auth
    # Returns all links for the authenticated user
    links: [Link!]!
}

type Mutation {
    # Register a new user
    register(input: RegisterInput!): AuthPayload
        @field(resolver: "App\\GraphQL\\Mutations\\Register")

    # Login an existing user
    login(input: LoginInput!): AuthPayload
        @field(resolver: "App\\GraphQL\\Mutations\\Login")

    # Create a new link
    createLink(input: LinkInput!): Link!
        @field(resolver: "App\\GraphQL\\Mutations\\CreateLink")

    # Delete a link by ID
    deleteLink(id: Int!): Boolean!
        @field(resolver: "App\\GraphQL\\Mutations\\DeleteLink")
}

type User {
    id: ID!
    name: String!
    email: String!
}

input RegisterInput {
    name: String!
    email: String! @rules(apply: ["email", "unique:users,email"])
    password: String! @rules(apply: ["min:8"])
    password_confirmation: String!
}

input LoginInput {
    email: String!
    password: String!
}

input LinkInput {
    url: String!
    category: String
}

type Link {
    id: ID!
    url: String!
    category: String
    created_at: String
}

type AuthPayload {
    token: String!
    user: User!
}
